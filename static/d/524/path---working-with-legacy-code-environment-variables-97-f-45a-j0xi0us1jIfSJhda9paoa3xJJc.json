{"data":{"site":{"siteMetadata":{"title":"warizz.io","author":"Warizz Yutanan"}},"markdownRemark":{"id":"f8873bf4-bf42-51e0-af1c-8ed4275bcc76","excerpt":"Hard-coded environment variables make deployment to another environment very hard because we have to look into the code to find out where are all the conditions…","html":"<p>Hard-coded environment variables make deployment to another environment very hard because we have to look into the code to find out where are all the conditions. It is also not secure because we have to put some API key into the code.\nIn webpack we used to define environment variables like this\nlet globalVars = new webpack.DefinePlugin({\nGRAPH<em>SERVER: JSON.stringify(‘some-url’),\nAPI</em>SERVER: JSON.stringify(‘some-url’),\n…\n});\nif (process.env.NODE<em>ENV === ‘production’) {\nglobalVars = new webpack.DefinePlugin({\nGRAPH</em>SERVER: JSON.stringify(‘some-url’),\nAPI<em>SERVER: JSON.stringify(‘some-url’),\n…<br>\n});\n} else if (process.env.NODE</em>ENV === ‘local’) {\nglobalVars = new webpack.DefinePlugin({\nGRAPH<em>SERVER: JSON.stringify(‘some-url’),\nAPI</em>SERVER: JSON.stringify(‘some-url’),\n…\n});\n}\nIf we need to have another environment like test or staging we have add more if conditions.\n…\n} else if (process.env.NODE<em>ENV === ‘local’) {\nglobalVars = new webpack.DefinePlugin({\nGRAPH</em>SERVER: JSON.stringify(‘some-url’),\nAPI<em>SERVER: JSON.stringify(‘some-url’),\n…\n});\n} else if (process.env.NODE</em>ENV === ‘test’) {\n…\n} else if (process.env.NODE<em>ENV === ‘staging’) {\n…\n}\nNot only in webpack config, we have them all over the places.\n// server.js\nconst hostname = SERVER</em>TYPE === ‘production’ ? ‘www.theasia.com’ : ‘www.theasiadev.com’;\nif (SERVER<em>TYPE === ‘production’ || SERVER</em>TYPE === ‘development’) {<br>\napp.use(forceDomain({ hostname, protocol: ‘https’ }));\n}\nSolution\nUse process.env , so we can remove all if conditions then the code looks a lot simpler.\n// webpack.config.js\nlet globalVars = new webpack.DefinePlugin({\nGRAPH<em>SERVER: JSON.stringify(process.env.GRAPH</em>SERVER),\nAPI<em>SERVER: JSON.stringify(process.env.API</em>SERVER),\n…\n});\n// server.js\nconst hostname = process.env.HOSTNAME;\nif (hostname) {<br>\napp.use(forceDomain({ hostname, protocol: ‘https’ }));\n}\nThere are so many ways to define process.env , on local machine, we use dotenv to load all variables from .env file. On Jenkins , we use EnvInject Plugin. On AWS , it will base on which kind of server you have.\nFrom now on, when we need to have another server, we can just deploy the app to new environment then change process.env , no need any new git commit.</p>","frontmatter":{"title":"Working with legacy code: environment variables","date":"December 12, 2018"}}},"pageContext":{"slug":"/working-with-legacy-code-environment-variables/","previous":null,"next":{"fields":{"slug":"/on-measuring-work/"},"frontmatter":{"title":"On measuring work"}}}}