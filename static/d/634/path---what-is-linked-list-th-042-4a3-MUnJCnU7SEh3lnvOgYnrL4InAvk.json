{"data":{"site":{"siteMetadata":{"title":"warizz.io","author":"Warizz Yutanan"}},"markdownRemark":{"id":"ef66bfa4-5fcc-596e-9606-44da818f5640","excerpt":"เมื่อไม่นานมานี้ ผมได้แรงบันดาลใจจากบทความ  I interviewed at five top companies in Silicon Valley in five days, and luckily got five job offers…","fields":{"slug":"/what-is-linked-list/th/"},"html":"<p>เมื่อไม่นานมานี้ ผมได้แรงบันดาลใจจากบทความ <a href=\"https://medium.com/@XiaohanZeng/i-interviewed-at-five-top-companies-in-silicon-valley-in-five-days-and-luckily-got-five-job-offers-25178cf74e0f\">I interviewed at five top companies in Silicon Valley in five days, and luckily got five job offers</a> และ<a href=\"https://news.ycombinator.com/item?id=18931129\">หลาย ๆ</a> <a href=\"https://news.ycombinator.com/item?id=11579757\">คอมเมนท์</a> จาก Hacker news ว่าเราก็ควรจะมีความรู้พวก algorithm หรือ data structure ไว้บ้าง เพื่อที่เมื่อถึงเวลา ก็สามารถหยิบจับมาใช้ได้ โดยที่ไม่ได้ทำแบบถึก ๆ เอาเพียงอย่างเดียว เราไม่จำเป็นแม้แต่จะต้องจำด้วยซ้ำว่ามันเขียนอย่างไร แค่รู้ว่าสถานการณ์นี้ ต้องค้นหาด้วยคีเวิร์ดอะไร ก็เพียงพอแล้ว</p>\n<p>สมัยเรียนมหาวิทยาลัย linked list ถือเป็นคำต้องห้ามของผม และเพื่อน ๆ บางคน (ต้องอ้างแบบนี้เพราะ ไม่ใช่ผมคนเดียวที่ได้ยินคำนี้ แล้วส่ายหัว) ตอนนั้นรู้สึกว่ามันยาก และไม่เข้าใจมันเลย (สมัยนู้นผมเป็นคนไม่ค่อยได้เรื่อง และไม่ได้ใส่ใจกับอะไรพวกนี้มากนัก ผมคนที่กำลังเขียนบทความนี้ ดีขึ้นมานิดหน่อย)  และเมื่อไม่กี่ปีที่ผ่านมา ผมซื้อ Udemy course ชื่อ <a href=\"https://www.udemy.com/learning-data-structures-in-javascript-from-scratch/\">Learning Data Structures in JavaScript from Scratch</a> (ไม่ได้ค่าโฆษณา) ซึ่งมีสอนเรื่อง linked list อยู่ในนั้นด้วย จึงได้รู้ว่า มันไม่ได้ยากเลย ตรงกันข้ามคือมันเข้าใจง่ายด้วยซ้ำ ก็เลยจะขอเปิดซีรีย์นี้ด้วย linked list ก็แล้วกัน</p>\n<h2>ความหมาย</h2>\n<p>จาก <a href=\"https://en.wikipedia.org/wiki/Linked_list\">Wikipedia</a></p>\n<blockquote>\n<p>In computer science, a Linked list is a linear collection of data elements, (…) each element points to the next. It is a data structure consisting of a collection of nodes which together represent a sequence. In its most basic form, each node contains: data, and a reference (in other words, a link) to the next node in the sequence.</p>\n</blockquote>\n<p>จาก <a href=\"https://www.geeksforgeeks.org/data-structures/linked-list/\">GeeksforGeeks</a></p>\n<blockquote>\n<p>A linked list is a linear data structure, (…) The elements in a linked list are linked using pointers (…)</p>\n</blockquote>\n<p>ถ้าจะให้เรียบเรียงตามความเข้าใจของผม ก็พอจะสรุปได้ว่า linked list คือ data structure ที่ประกอบไปด้วย ข้อมูล (ในที่นี้จะเรียกว่า node) ที่ต่อกันเป็นเส้นตรง (เส้นตรงหมายถึง มีแค่ 2 ทิศทาง คือ ก่อนหน้า หรือถัดไป) โดยแต่ละ node จะสามารถอ้างถึง node ที่อยู่ถัดไปได้เท่านั้น</p>\n<h2>การนำไปใช้</h2>\n<p>ตลอดชีวิตการเป็นโปรแกรมเมอร์ผมไม่เคยมีโอกาสได้เอา linked list ไปใช้เลยสักครั้ง ก็เลยต้องพึ่งเหตุผลจากคนอื่น ๆ แทน ซึ่งพอจะสรุปคร่าว ๆ ได้ว่า</p>\n<ul>\n<li>\n<p>linked list เพิ่ม หรือลบ ข้อมูล ได้มีประสิทธิภาพกว่า array list ในบางเคส <sup>[1]</sup></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Algorithm           ArrayList   LinkedList\nseek front            <span class=\"token constant\">O</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>         <span class=\"token constant\">O</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nseek back             <span class=\"token constant\">O</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>         <span class=\"token constant\">O</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nseek to index         <span class=\"token constant\">O</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>         <span class=\"token constant\">O</span><span class=\"token punctuation\">(</span><span class=\"token constant\">N</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">insert at front       <span class=\"token constant\">O</span><span class=\"token punctuation\">(</span><span class=\"token constant\">N</span><span class=\"token punctuation\">)</span>         <span class=\"token constant\">O</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span>insert at back        <span class=\"token constant\">O</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>         <span class=\"token constant\">O</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">insert after an item  <span class=\"token constant\">O</span><span class=\"token punctuation\">(</span><span class=\"token constant\">N</span><span class=\"token punctuation\">)</span>         <span class=\"token constant\">O</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span></code></pre></div>\n</li>\n<li>linked list มีความยืดหยุ่นมากกว่า ในการจัดการหน่วยความจำ <sup>[2]</sup>  </li>\n</ul>\n<p>สรุปคือ ถ้าคุณไม่ได้จะเขียนโค้ดที่ low level มากจริงๆ ก็แทบจะไม่มีโอกาสได้ใช้ linked list เลย</p>\n<h2>ตัวอย่าง</h2>\n<p><a href=\"https://repl.it/@warizz/NodeJsLinkedList\">code</a></p>\n<p>ในที่นี้จะเป็นตัวอย่างในการเขียน linked list แบบ doubly ซึ่งจะมี reference 2 ทางคือ หัวและหาง (แบบปกติ singly จะมีแค่หัว)</p>\n<p>เริ่มต้นด้วยการสร้าง คลาส <code class=\"language-text\">Node</code> สำหรับเก็บข้อมูล(<code class=\"language-text\">value</code>) และ reference ของ node ข้าง ๆ ด้วย <code class=\"language-text\">next</code> และ <code class=\"language-text\">prev</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">,</span> prev<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>และคลาส <code class=\"language-text\">LinkedList</code> ที่เก็บแค่ reference ของ <code class=\"language-text\">Node</code> หัวและหางเท่านั้น</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">LinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>จากนั้นก็เพิ่มฟังชัน <code class=\"language-text\">addToHead</code> ให้คลาส <code class=\"language-text\">LinkedList</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">LinkedList<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">addToHead</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">addToHead</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> _node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> _node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> _node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> _node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>เริ่มฟังชันด้วยการ <code class=\"language-text\">new Node</code> แล้วให้หัวเก่าเป็น หัวถัดไปของหัวใหม่</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> _node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token comment\">/* next */</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ถ้าเดิมหัวมีข้อมูลอยู่แล้ว ให้ตั้งค่า <code class=\"language-text\">prev</code> ของ node นั้นเป็นอันใหม่ แต่ถ้าไม่มี ให้เพิ่ม node ใหม่เข้าไปในหางด้วย</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> _node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> _node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>เราสามารถทดลองใช้ <code class=\"language-text\">addToHead</code> ได้ดังนี้</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> linkedList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nlinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">addToHead</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1st\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">addToHead</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2nd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">addToHead</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3rd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// \"3rd -> 2nd -> 1st\"</span></code></pre></div>\n<p><code class=\"language-text\">addToTail</code> นั้นไม่ต่างกันมาก เพียงแค่สลับหัวและหาง</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">LinkedList<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">addToTail</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">addToTail</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> _node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> _node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> _node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> _node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ทดลองใช้ <code class=\"language-text\">addToTail</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> linkedList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nlinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">addToTail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1st\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">addToTail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2nd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">addToTail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3rd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1st -> 2nd -> 3rd</span></code></pre></div>\n<p>การลบ node ออกนั้น วิธีที่ง่ายและมีประสิทธิภาพที่สุดก็คือการเอาออกทางหัว หรือหาง มาดูที่หัวกันก่อน</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">LinkedList<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">removeHead</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">removeHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ส่วนที่ดูสับสนนิดหน่อย ก็น่าจะอยู่ตรงที่การย้ายหัวไปไว้ที่ node ถัดไป</p>\n<ul>\n<li>ถ้า node ถัดไปไม่ว่างเปล่า ก็เอามาเป็น <code class=\"language-text\">head</code> แทน แล้วจึงตัดหัวเก่าออกด้วยการใส่ <code class=\"language-text\">null</code> ให้ <code class=\"language-text\">.prev</code> ของหัวใหม่</li>\n<li>ถ้า node ถัดไปว่างเปล่า แสดงว่า ทั้ง linked list นั้นมี node เดียว การเอาหัวออก จึงจำเป็นต้องเอาหางออกด้วย ในที่นี้เลยต้องให้ <code class=\"language-text\">tail</code> เป็น <code class=\"language-text\">null</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>  \n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">removeTail</code> ก็คล้ายกัน</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">LinkedList<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">removeTail</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">removeTail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ตัวอย่างการใช้งาน <code class=\"language-text\">removeHead</code> และ <code class=\"language-text\">removeTail</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> linkedList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nlinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">addToHead</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1st\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">addToHead</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2nd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">addToHead</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3rd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">addToHead</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4th\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">addToHead</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5th\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nlinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">removeHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"5th\"</span>\nlinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">removeTail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"1st\"</span>\nlinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">removeHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"4th\"</span>\nlinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">removeTail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"2nd\"</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>linkedList<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"3rd\"</span></code></pre></div>\n<p>และแล้วก็จบหลักการคร่าว ๆ ของ linked list ซึ่งไม่ได้ยากเลย ผมก็ไม่เข้าใจเหมือนกันว่าทำไมสมัยโน้นถึงคิดว่ามันยากเหลือเกิน จริง ๆ แล้วคุณยังสามารถทำอะไรกับมันได้อีกมากมาย เช่น <code class=\"language-text\">search(index)</code>, <code class=\"language-text\">search(value)</code> หรือ <code class=\"language-text\">indexOf(value)</code> ซึ่งจะไม่ขอพูดถึงในนี้ และคิดว่าน่าจะเอาไปเขียนกันเองได้ไม่ยาก</p>\n<h2>อ้างอิง</h2>\n<ol>\n<li><strong>Vpn_talent</strong>’s <a href=\"https://stackoverflow.com/a/45433210\">answer</a> in <a href=\"https://stackoverflow.com/questions/393556/when-to-use-a-linked-list-over-an-array-array-list/45433210#45433210\">When to use a linked list over an array/array list?</a>.</li>\n<li><strong>“Memory Management”</strong> in <a href=\"https://medium.com/basecs/whats-a-linked-list-anyway-part-1-d8b7e6508b9d\">What’s a Linked List, Anyway? [Part 1]</a>.</li>\n</ol>","frontmatter":{"title":"linked list คืออะไร?","date":"January 23, 2019","lang":"th","langs":["en","th"]}}},"pageContext":{"slug":"/what-is-linked-list/th/","previous":{"fields":{"slug":"/reading-other-people-code-ep-2/"},"frontmatter":{"title":"Reading other people's code episode 2: Array.prototype.map","lang":null}},"next":{"fields":{"slug":"/what-is-linked-list/"},"frontmatter":{"title":"What is linked list?","lang":null}}}}