{"data":{"site":{"siteMetadata":{"title":"warizz.io","author":"Warizz Yutanan"}},"markdownRemark":{"id":"cc118d6d-2f39-5c00-af54-811008b8f735","excerpt":"Recently, I got an inspiration from reading  I interviewed at five top companies in Silicon Valley in five days, and luckily got five job offers  and  other…","fields":{"slug":"/what-is-linked-list/"},"html":"<p>Recently, I got an inspiration from reading <a href=\"https://medium.com/@XiaohanZeng/i-interviewed-at-five-top-companies-in-silicon-valley-in-five-days-and-luckily-got-five-job-offers-25178cf74e0f\">I interviewed at five top companies in Silicon Valley in five days, and luckily got five job offers</a> and <a href=\"https://news.ycombinator.com/item?id=18931129\">other</a> <a href=\"https://news.ycombinator.com/item?id=11579757\">comments</a> from <a href=\"https://news.ycombinator.com\">Hacker News</a> that we—programmers—should know some algorithms or data structures so we can know when and how to use them by heart instead of using only brute force. We don’t even need to remember how to implement them but we should know what <em>keyword</em> to search for.</p>\n<p>When I was in college, <em>linked list</em> was a forbidden word for me and some of my friends (we made disgusting face when we heard the word) because I didn’t understand it one bit (I did not pay attention to school much that time.). Just a few years ago, I bought an Udemy course name <a href=\"https://www.udemy.com/learning-data-structures-in-javascript-from-scratch/\">Learning Data Structures in JavaScript from Scratch</a> (not advertising) which linked list is one of its lectures. After finished the course, I realized that it isn’t hard to understand at all, actually, it is super simple! So—to lift my long time curse—I would like to start my algorithm series with it.</p>\n<h2>Definition</h2>\n<p>From <a href=\"https://en.wikipedia.org/wiki/Linked_list\">Wikipedia</a></p>\n<blockquote>\n<p>In computer science, a Linked list is a linear collection of data elements, (…) each element points to the next. It is a data structure consisting of a collection of nodes which together represent a sequence. In its most basic form, each node contains: data, and a reference (in other words, a link) to the next node in the sequence.</p>\n</blockquote>\n<p>From <a href=\"https://www.geeksforgeeks.org/data-structures/linked-list/\">GeeksforGeeks</a></p>\n<blockquote>\n<p>A linked list is a linear data structure, (…) The elements in a linked list are linked using pointers (…)</p>\n</blockquote>\n<p>From my understanding, linked list is <strong>a data structure that consist of nodes linked together into linear line which each node can only reference to its next node.</strong></p>\n<h2>When to use</h2>\n<p>For my entire programming life, I never have a chance to implement linked list into any code base. So, I would only summary its benefits from what I just googled.</p>\n<ul>\n<li>\n<p>It can add/ delete data more efficiently than array in some case <sup>[1]</sup>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Algorithm           ArrayList   LinkedList\nseek front            <span class=\"token constant\">O</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>         <span class=\"token constant\">O</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nseek back             <span class=\"token constant\">O</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>         <span class=\"token constant\">O</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nseek to index         <span class=\"token constant\">O</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>         <span class=\"token constant\">O</span><span class=\"token punctuation\">(</span><span class=\"token constant\">N</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">insert at front       <span class=\"token constant\">O</span><span class=\"token punctuation\">(</span><span class=\"token constant\">N</span><span class=\"token punctuation\">)</span>         <span class=\"token constant\">O</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span>insert at back        <span class=\"token constant\">O</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>         <span class=\"token constant\">O</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">insert after an item  <span class=\"token constant\">O</span><span class=\"token punctuation\">(</span><span class=\"token constant\">N</span><span class=\"token punctuation\">)</span>         <span class=\"token constant\">O</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span></code></pre></div>\n</li>\n<li>It has more flexibility in memory management <sup>[2]</sup>.</li>\n</ul>\n<p>In conclusion, if you’re not writing low-level code, you wouldn’t have to write any linked list at all.</p>\n<h2>​Example</h2>\n<p><a href=\"https://repl.it/@warizz/NodeJsLinkedList\" target=\"\\_blank\" rel=\"noreferrer noopener\">Full code example</a></p>\n<p>This is an example of <em>doubly</em> linked list which have 2 references in a node, next and previous. (<em>singly</em> type only have reference to next node).</p>\n<p>Let’s start with <code class=\"language-text\">Node</code> class, we store data in <code class=\"language-text\">value</code> and keep sibling node references in <code class=\"language-text\">next</code> and <code class=\"language-text\">prev</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">,</span> prev<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And <code class=\"language-text\">LinkedList</code> class that only store a reference of head and tail node.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">LinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then we add <code class=\"language-text\">addToHead</code> function to <code class=\"language-text\">LinkedList</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">LinkedList<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">addToHead</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">addToHead</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> _node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> _node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> _node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> _node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Inside the function, we instantiate new node from <code class=\"language-text\">Node</code> class and assign former head’s reference into <code class=\"language-text\">next</code> of new head.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> _node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token comment\">/* next */</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If <code class=\"language-text\">head</code> exists (it will be <code class=\"language-text\">null</code> in every newly created <code class=\"language-text\">LinkedList</code>), we assign its <code class=\"language-text\">prev</code> with new head bacause new head is going to be previous to the former head; furthermore, we put new head to <code class=\"language-text\">tail</code> because in 1 element linked list, head and tail will be reference of the same node.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> _node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> _node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Examples of <code class=\"language-text\">addToHead</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> linkedList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nlinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">addToHead</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1st\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">addToHead</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2nd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">addToHead</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3rd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// \"3rd -> 2nd -> 1st\"</span></code></pre></div>\n<p><code class=\"language-text\">addToTail</code> function is just switching between head and tail.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">LinkedList<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">addToTail</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">addToTail</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> _node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> _node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> _node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> _node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Examples of <code class=\"language-text\">addToTail</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> linkedList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nlinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">addToTail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1st\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">addToTail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2nd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">addToTail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3rd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1st -> 2nd -> 3rd</span></code></pre></div>\n<p>To delete a node, a simple and efficient way is removing it from head or tail. Let’s see <code class=\"language-text\">removeHead</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">LinkedList<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">removeHead</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">removeHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The tricky part is moving <code class=\"language-text\">head</code> to next node in the list.</p>\n<ul>\n<li>\n<p>If next node is not empty, make it the new <code class=\"language-text\">head</code> then we remove old head by assign <code class=\"language-text\">null</code> to <code class=\"language-text\">prev</code> of new head. This means there is no node come after current head.  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>  </span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  </span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></code></pre></div>\n</li>\n<li>\n<p>If next node is empty, that’s means the entire linked list has only 1 node; therefore, if we want to remove head we should remove tail also.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<p><code class=\"language-text\">removeTail</code> is similar.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">LinkedList<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">removeTail</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">removeTail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Examples of <code class=\"language-text\">removeHead</code> and <code class=\"language-text\">removeTail</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> linkedList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nlinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">addToHead</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1st\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">addToHead</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2nd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">addToHead</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3rd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">addToHead</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4th\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">addToHead</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5th\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nlinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">removeHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"5th\"</span>\nlinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">removeTail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"1st\"</span>\nlinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">removeHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"4th\"</span>\nlinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">removeTail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"2nd\"</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>linkedList<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"3rd\"</span></code></pre></div>\n<p>And this is a rough principle of <em>linked list</em>. You can do more with it by adding functions like <code class=\"language-text\">search(index)</code>, <code class=\"language-text\">search(value)</code>, <code class=\"language-text\">indexOf(value)</code> or whatever you can think of. As you can see, <em>linked list</em> is very simple data structure and I’m not sure why I thought it is super hard to understand when I was in university years. 😕</p>\n<h2>References</h2>\n<ol>\n<li><strong>Vpn_talent</strong>’s <a href=\"https://stackoverflow.com/a/45433210\">answer</a> in <a href=\"https://stackoverflow.com/questions/393556/when-to-use-a-linked-list-over-an-array-array-list/45433210#45433210\">When to use a linked list over an array/array list?</a>.</li>\n<li><strong>“Memory Management”</strong> in <a href=\"https://medium.com/basecs/whats-a-linked-list-anyway-part-1-d8b7e6508b9d\">What’s a Linked List, Anyway? [Part 1]</a>.</li>\n</ol>","frontmatter":{"title":"What is linked list?","date":"January 23, 2019","lang":null,"langs":["en","th"]}}},"pageContext":{"slug":"/what-is-linked-list/","previous":{"fields":{"slug":"/reading-other-people-code-ep-2/"},"frontmatter":{"title":"Reading other people's code episode 2: Array.prototype.map","lang":null}},"next":{"fields":{"slug":"/nin-ta-prated-thai/"},"frontmatter":{"title":"นินทาประเทศไทย เฉพาะช่วงกฎหมาย","lang":null}}}}