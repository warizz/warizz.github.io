{"data":{"site":{"siteMetadata":{"title":"warizz.io","author":"Warizz Yutanan"}},"markdownRemark":{"id":"e7c4f73d-4e46-5c5e-b110-f8a28c05e2e4","excerpt":" is my one of the most frequently used JavaScript function. Source code Because this is polyfill source code so first few lines are about assigning   function…","html":"<p><code class=\"language-text\">Array.prototype.map</code> is my one of the most frequently used JavaScript function.</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">Source code</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Production steps of ECMA-262, Edition 5, 15.4.4.19</span>\n<span class=\"token comment\">// Reference: http://es5.github.io/#x15.4.4.19</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  Array<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">map</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>callback<span class=\"token comment\">/*, thisArg*/</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">var</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is null or not defined'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 1. Let O be the result of calling ToObject passing the |this|</span>\n    <span class=\"token comment\">//    value as the argument.</span>\n    <span class=\"token keyword\">var</span> <span class=\"token constant\">O</span> <span class=\"token operator\">=</span> <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 2. Let lenValue be the result of calling the Get internal</span>\n    <span class=\"token comment\">//    method of O with the argument \"length\".</span>\n    <span class=\"token comment\">// 3. Let len be ToUint32(lenValue).</span>\n    <span class=\"token keyword\">var</span> len <span class=\"token operator\">=</span> <span class=\"token constant\">O</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">>>></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 4. If IsCallable(callback) is false, throw a TypeError exception.</span>\n    <span class=\"token comment\">// See: http://es5.github.com/#x9.11</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> callback <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span>callback <span class=\"token operator\">+</span> <span class=\"token string\">' is not a function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 5. If thisArg was supplied, let T be thisArg; else let T be undefined.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token constant\">T</span> <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 6. Let A be a new array created as if by the expression new Array(len)</span>\n    <span class=\"token comment\">//    where Array is the standard built-in constructor with that name and</span>\n    <span class=\"token comment\">//    len is the value of len.</span>\n    <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 7. Let k be 0</span>\n    k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 8. Repeat, while k &lt; len</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n      <span class=\"token keyword\">var</span> kValue<span class=\"token punctuation\">,</span> mappedValue<span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// a. Let Pk be ToString(k).</span>\n      <span class=\"token comment\">//   This is implicit for LHS operands of the in operator</span>\n      <span class=\"token comment\">// b. Let kPresent be the result of calling the HasProperty internal</span>\n      <span class=\"token comment\">//    method of O with argument Pk.</span>\n      <span class=\"token comment\">//   This step can be combined with c</span>\n      <span class=\"token comment\">// c. If kPresent is true, then</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token keyword\">in</span> <span class=\"token constant\">O</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// i. Let kValue be the result of calling the Get internal</span>\n        <span class=\"token comment\">//    method of O with argument Pk.</span>\n        kValue <span class=\"token operator\">=</span> <span class=\"token constant\">O</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// ii. Let mappedValue be the result of calling the Call internal</span>\n        <span class=\"token comment\">//     method of callback with T as the this value and argument</span>\n        <span class=\"token comment\">//     list containing kValue, k, and O.</span>\n        mappedValue <span class=\"token operator\">=</span> callback<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> kValue<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> <span class=\"token constant\">O</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// iii. Call the DefineOwnProperty internal method of A with arguments</span>\n        <span class=\"token comment\">// Pk, Property Descriptor</span>\n        <span class=\"token comment\">// { Value: mappedValue,</span>\n        <span class=\"token comment\">//   Writable: true,</span>\n        <span class=\"token comment\">//   Enumerable: true,</span>\n        <span class=\"token comment\">//   Configurable: true },</span>\n        <span class=\"token comment\">// and false.</span>\n\n        <span class=\"token comment\">// In browsers that support Object.defineProperty, use the following:</span>\n        <span class=\"token comment\">// Object.defineProperty(A, k, {</span>\n        <span class=\"token comment\">//   value: mappedValue,</span>\n        <span class=\"token comment\">//   writable: true,</span>\n        <span class=\"token comment\">//   enumerable: true,</span>\n        <span class=\"token comment\">//   configurable: true</span>\n        <span class=\"token comment\">// });</span>\n\n        <span class=\"token comment\">// For best browser support, use the following:</span>\n        <span class=\"token constant\">A</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mappedValue<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// d. Increase k by 1.</span>\n      k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 9. return A</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Because this is polyfill source code so first few lines are about assigning <code class=\"language-text\">map</code> function to <code class=\"language-text\">Array.prototype</code>. The function receives <code class=\"language-text\">callback</code> as first argument. Second argument is <code class=\"language-text\">thisArg</code> but was commented out because later in the code it will be retrieved by using <code class=\"language-text\">arguments[1]</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  Array<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">map</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>callback<span class=\"token comment\">/*, thisArg*/</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span></code></pre></div>\n<p>After are declaring empty variables and validation of <code class=\"language-text\">this</code> (another usage of <code class=\"language-text\">== null</code> for <code class=\"language-text\">null</code> and <code class=\"language-text\">undefined</code> checking), statement <code class=\"language-text\">var O = Object(this);</code> make me curious why they have to do this.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is null or not defined'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 1. Let O be the result of calling ToObject passing the |this|</span>\n<span class=\"token comment\">//    value as the argument.</span>\n<span class=\"token keyword\">var</span> <span class=\"token constant\">O</span> <span class=\"token operator\">=</span> <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\">MDN’s <code class=\"language-text\">Object</code> description</a>.</p>\n<blockquote>\n<p>The Object constructor creates an object wrapper for the given value. If the value is <code class=\"language-text\">null</code> or <code class=\"language-text\">undefined</code>, it will create and return an empty object, otherwise, it will return an object of a Type that corresponds to the given value. If the value is an object already, it will return the value.</p>\n</blockquote>\n<blockquote>\n<p>When called in a non-constructor context, <code class=\"language-text\">Object</code> behaves identically to <code class=\"language-text\">new Object()</code>.</p>\n</blockquote>\n<p>I tried to use <code class=\"language-text\">Object()</code> with multiple types, all returned values were converted to <code class=\"language-text\">Object</code>. So my assumption of using this function is to make sure <code class=\"language-text\">this</code> is an object.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">// {}</span>\n<span class=\"token function\">Object</span><span class=\"token punctuation\">(</span>undefined<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// {}</span>\n<span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>            <span class=\"token comment\">// {}</span>\n<span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// [1, 2, 3]</span>\n<span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">// {a: 1}</span>\n\n<span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span>         <span class=\"token comment\">// String {\"1\"} type \"object\"</span>\n<span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>           <span class=\"token comment\">// Number {1} type \"object\"</span>\n<span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">// Boolean {false} type \"object\"</span></code></pre></div>\n<p>I never saw any usages of <code class=\"language-text\">&gt;&gt;&gt;</code> in JavaScript before so I googled and learned that it is called <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#%3E%3E%3E_(Zero-fill_right_shift)\"><strong>Zero-fill right shift</strong></a>. From the useful comment of the statement, reason for using <code class=\"language-text\">&gt;&gt;&gt;</code> is to convert <code class=\"language-text\">Number</code> to <code class=\"language-text\">UNSIGNED INT 32</code> (This is a <a href=\"https://stackoverflow.com/questions/22335853/hack-to-convert-javascript-number-to-uint32\">hack way</a>. May be because JavaScript has no built-in function to do it). I still don’t know why <code class=\"language-text\">len</code> have to be <code class=\"language-text\">Uint32</code> though.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 2. Let lenValue be the result of calling the Get internal</span>\n<span class=\"token comment\">//    method of O with the argument \"length\".</span>\n<span class=\"token comment\">// 3. Let len be ToUint32(lenValue).</span>\n<span class=\"token keyword\">var</span> len <span class=\"token operator\">=</span> <span class=\"token constant\">O</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">>>></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Then check if <code class=\"language-text\">callback</code> is type <code class=\"language-text\">function</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 4. If IsCallable(callback) is false, throw a TypeError exception.</span>\n<span class=\"token comment\">// See: http://es5.github.com/#x9.11</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> callback <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span>callback <span class=\"token operator\">+</span> <span class=\"token string\">' is not a function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then assign <code class=\"language-text\">T</code> with second argument of <code class=\"language-text\">map</code> function (remember <code class=\"language-text\">thisArg</code>?) and will be used later in iteration of target array.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 5. If thisArg was supplied, let T be thisArg; else let T be undefined.</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">T</span> <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">...</span>\n\n<span class=\"token comment\">// ii. Let mappedValue be the result of calling the Call internal</span>\n<span class=\"token comment\">//     method of callback with T as the this value and argument</span>\n<span class=\"token comment\">//     list containing kValue, k, and O.</span>\nmappedValue <span class=\"token operator\">=</span> callback<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> kValue<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> <span class=\"token constant\">O</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Then assign <code class=\"language-text\">A</code> with an empty array of size determined by <code class=\"language-text\">len</code> (length of target array).</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 6. Let A be a new array created as if by the expression new Array(len)</span>\n<span class=\"token comment\">//    where Array is the standard built-in constructor with that name and</span>\n<span class=\"token comment\">//    len is the value of len.</span>\n<span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Then we finally come to iteration which is pretty simple, each index of <code class=\"language-text\">A</code> will be assigned by the result from executions of <code class=\"language-text\">callback</code>. When iteration completed, return <code class=\"language-text\">A</code> as a final result.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">var</span> kValue<span class=\"token punctuation\">,</span> mappedValue<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token keyword\">in</span> <span class=\"token constant\">O</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    kValue <span class=\"token operator\">=</span> <span class=\"token constant\">O</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    mappedValue <span class=\"token operator\">=</span> callback<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> kValue<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> <span class=\"token constant\">O</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token constant\">A</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mappedValue<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>To be honest, I never used <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in\"><code class=\"language-text\">in</code></a> operator before, I have seen usages of it but never tried in my code. In this case, <code class=\"language-text\">if (k in O)</code> will return false when <code class=\"language-text\">k</code> is not an index of <code class=\"language-text\">O</code>. (example below comes from <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in#Description\">here</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> trees <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'redwood'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bay'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cedar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'oak'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'maple'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">0</span> <span class=\"token keyword\">in</span> trees        <span class=\"token comment\">// returns true</span>\n<span class=\"token number\">3</span> <span class=\"token keyword\">in</span> trees        <span class=\"token comment\">// returns true</span>\n<span class=\"token number\">6</span> <span class=\"token keyword\">in</span> trees        <span class=\"token comment\">// returns false</span></code></pre></div>\n<p>And that’s it <code class=\"language-text\">Array.prototype.map</code> simple but yet I learned a lot even from very tiny source code.</p>\n<hr>\n<h3>Things I learned</h3>\n<ul>\n<li>All those number bullet-point comments come from <a href=\"http://es5.github.io/#x15.4.4.19\">Annotated ECMAScript 5.1</a></li>\n<li>\n<p>From <code class=\"language-text\">&gt;&gt;&gt;</code></p>\n<ul>\n<li>It called <strong>Zero-fill right shift</strong>.</li>\n<li>Convert <code class=\"language-text\">Number</code> base 10 to binary using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString\"><code class=\"language-text\">Number.toString(2)</code></a>.</li>\n<li>Some of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\">bitwise operators</a>.</li>\n<li><code class=\"language-text\">UNSIGNED INT</code> has no negative value.</li>\n</ul>\n</li>\n<li>Using <code class=\"language-text\">in</code> with <code class=\"language-text\">Array</code> and index number.</li>\n<li>\n<p>English writing</p>\n<ul>\n<li><a href=\"https://english.stackexchange.com/questions/103152/i-came-from-italy-or-i-come-from-italy\"><code class=\"language-text\">come from</code> vs <code class=\"language-text\">came from</code></a>—use <code class=\"language-text\">come</code> <em>mostly</em>.</li>\n<li><a href=\"https://dictionary.cambridge.org/grammar/british-grammar/if-or-whether\"><code class=\"language-text\">if</code> vs <code class=\"language-text\">whether</code></a>—<em>almost</em> the same meanings and usages.</li>\n</ul>\n</li>\n</ul>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/11515594/when-should-i-use-unsigned-and-signed-int-in-mysql\">When should I use UNSIGNED and SIGNED INT in MySQL?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/22335853/hack-to-convert-javascript-number-to-uint32\">Hack to convert javascript number to UInt32</a></li>\n</ul>","frontmatter":{"title":"Reading other people's code episode 2: Array.prototype.map","date":"January 17, 2019"}}},"pageContext":{"slug":"/reading-other-people-code-ep-2/","previous":{"fields":{"slug":"/trip-2019-01-th/"},"frontmatter":{"title":"เขาสันหนอกวัว, กาญจนบุรี"}},"next":null}}